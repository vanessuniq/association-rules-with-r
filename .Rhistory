wd
getwd()
dir()
# install the TSP, data.table and aruleViz packages
install.packages("TSP")
install.packages("data.table")
install.packages("arulesViz")
# load the arules and arulesViz package in memory
library("arules")
library("arulesViz")
# load the data and save into the credit data frame variable
credit <- read.csv(file="CreditApproval1.csv", head=TRUE, sep = ",", as.is = FALSE)
# preview the data frame credit
kable(head(credit), caption = "Figure 1: Credit Approval Dataset Preview")
# Display the data structure
str(credit)
install.packages("kableExtra")
library("kableExtra")
# preview the data frame credit
kable(head(credit), caption = "Figure 1: Credit Approval Dataset Preview")
# preview the data frame credit
head(credit)
# Display the data structure
str(credit)
# remove the irrelevant key values
credit$Key <- NULL
# Data preview after dropping the key column
head(credit)
# Display the data structure
str(credit)
# running k-means discretization method on age, debt, yearsemployed, creditscore, and income variables
credit$Age <- discretize(credit$Age, method = "cluster", breaks = 6)
summary(credit$Age)
credit$Debt <- discretize(credit$Debt, method = "cluster", breaks = 6)
summary(credit$Debt)
credit$YearsEmployed <- discretize(credit$YearsEmployed, method = "cluster", breaks = 6)
summary(credit$YearsEmployed)
credit$CreditScore <- discretize(credit$CreditScore, method = "cluster", breaks = 4)
summary(credit$CreditScore)
credit$Income <- discretize(credit$Income, method = "cluster", breaks = 6)
summary(credit$Income)
# running Factor function on zipcode variable
credit$Zipcode <- factor(credit$Zipcode)
summary(credit$Zipcode)
# running frequency discretization method on age, debt, yearsemployed, creditscore, and income variables
credit$Age <- discretize(credit$Age, method = "frequency", breaks = 6)
summary(credit$Age)
credit$Debt <- discretize(credit$Debt, method = "frequency", breaks = 6)
summary(credit$Debt)
credit$YearsEmployed <- discretize(credit$YearsEmployed, method = "frequency", breaks = 4)
summary(credit$YearsEmployed)
credit$CreditScore <- discretize(credit$CreditScore, method = "frequency", breaks = 4)
summary(credit$CreditScore)
credit$Income <- discretize(credit$Income, method = "frequency", breaks = 6)
summary(credit$Income)
# running Factor function on zipcode variable
credit$Zipcode <- factor(credit$Zipcode)
summary(credit$Zipcode)
# load the data and save into the credit data frame variable
credit <- read.csv(file="CreditApproval1.csv", head=TRUE, sep = ",", as.is = FALSE)
# running frequency discretization method on age, debt, yearsemployed, creditscore, and income variables
credit$Age <- discretize(credit$Age, method = "frequency", breaks = 6)
summary(credit$Age)
credit$Debt <- discretize(credit$Debt, method = "frequency", breaks = 6)
summary(credit$Debt)
credit$YearsEmployed <- discretize(credit$YearsEmployed, method = "frequency", breaks = 4)
summary(credit$YearsEmployed)
credit$CreditScore <- discretize(credit$CreditScore, method = "frequency", breaks = 4)
summary(credit$CreditScore)
credit$Income <- discretize(credit$Income, method = "frequency", breaks = 6)
summary(credit$Income)
# running Factor function on zipcode variable
credit$Zipcode <- factor(credit$Zipcode)
summary(credit$Zipcode)
credit <- read.csv(file="CreditApproval1.csv", head=TRUE, sep = ",", as.is = FALSE)
credit$Key <- NULL
# running k-means discretization method on age, debt, yearsemployed, creditscore, and income variables
credit$Age <- discretize(credit$Age, method = "cluster", breaks = 6)
summary(credit$Age)
credit$Debt <- discretize(credit$Debt, method = "cluster", breaks = 6)
summary(credit$Debt)
credit$YearsEmployed <- discretize(credit$YearsEmployed, method = "cluster", breaks = 4)
summary(credit$YearsEmployed)
credit$CreditScore <- discretize(credit$CreditScore, method = "cluster", breaks = 4)
summary(credit$CreditScore)
credit$Income <- discretize(credit$Income, method = "cluster", breaks = 6)
summary(credit$Income)
# running Factor function on zipcode variable
credit$Zipcode <- factor(credit$Zipcode)
summary(credit$Zipcode)
# load the data and save into the credit data frame variable
credit <- read.csv(file="CreditApproval1.csv", head=TRUE, sep = ",", as.is = FALSE)
# preview the data frame credit
head(credit)
# Display the data structure
str(credit)
# Data Preprocessing
# remove the irrelevant key values
credit$Key <- NULL
# Data preview after dropping the key column
head(credit)
# running k-means discretization method on age, debt, yearsemployed, creditscore, and income variables
credit$Age <- discretize(credit$Age, method = "cluster", breaks = 6)
summary(credit$Age)
credit$Debt <- discretize(credit$Debt, method = "cluster", breaks = 6)
summary(credit$Debt)
credit$YearsEmployed <- discretize(credit$YearsEmployed, method = "cluster", breaks = 4)
summary(credit$YearsEmployed)
credit$CreditScore <- discretize(credit$CreditScore, method = "cluster", breaks = 4)
summary(credit$CreditScore)
credit$Income <- discretize(credit$Income, method = "cluster", breaks = 6)
summary(credit$Income)
# running Factor function on zipcode variable
credit$Zipcode <- factor(credit$Zipcode)
summary(credit$Zipcode)
# Run the method with default parameters and save it into the variable rules
rules <- apriori(credit)
rules
# inspect the first 10 rules
inspect(rules[1:10])
#  run the method with 2 different combinations of confidence, support and min length values
# first run:
rules <- apriori(credit, parameter= list(supp=0.4, conf=0.7, minlen=2))
rules
inspect(rules[1:10])
#second run:
rules <- apriori(credit, parameter= list(supp=0.5, conf=0.8, minlen=2))
rules
inspect(rules[1:10])
summary(rules)
# rules with "+" or "-" on the right hand side
rules<-apriori(credit, parameter= list(supp=0.2, conf=0.8, minlen=2), appearance=list(rhs=c("Approved=-", "Approved=+"), default="lhs"))
rules
inspect(rules[1:10])
# rules with "+" or "-" on the right hand side
rules<-apriori(credit, parameter= list(supp=0.2, conf=0.8, minlen=2), appearance=list(rhs=c("class=-", "class=+"), default="lhs"))
rules
inspect(rules[1:10])
rules.sorted <- sort(rules, by="lift")
inspect(rules.sorted)
#Remove the redundant rules
subset.matrix <- is.subset(rules.sorted, rules.sorted)
subset.matrix[lower.tri(subset.matrix, diag=T)] <- F
redundant <- colSums(subset.matrix, na.rm=T) >= 1
which(redundant)
# rules with "+" or "-" on the right hand side
rules<-apriori(credit, parameter= list(supp=0.2, conf=0.8, minlen=2), appearance=list(rhs=c("class=-", "class=+"), default="lhs"))
# Pruning rules
rules.sorted <- sort(rules, by="lift")
inspect(rules.sorted)
#Remove the redundant rules
subset.matrix <- is.subset(rules.sorted, rules.sorted)
subset.matrix[lower.tri(subset.matrix, diag=T)] <- F
redundant <- colSums(subset.matrix, na.rm=T) >= 1
which(redundant)
rules.pruned <- rules.sorted[!redundant]
inspect(rules.pruned)
# visualize the rules
plot(rules.pruned, method="matrix", measure=c("lift", "confidence"))
# visualize the rules
plot(rules.pruned, method="graph")
# visualize the rules
plot(rules.pruned, method="paracoord", control = list(reorder = TRUE))
#load libraries
library("arules")
library("arulesViz")
#Load the Student Alcohol consumption data
alcohol<-read.csv(file="student-mat.csv", head=TRUE, sep=",", as.is = FALSE)
#run the Str and summary commands to acquaint ourself with the data
str(alcohol)
summary(alcohol)
#Load the Student Alcohol consumption data
alcohol<-read.csv(file="student-mat.csv", head=TRUE, sep=",")
#run the Str and summary commands to acquaint ourself with the data
str(alcohol)
summary(alcohol)
#Load the Student Alcohol consumption data
alcohol<-read.csv(file="student-mat.csv", head=TRUE, sep=";")
#run the Str and summary commands to acquaint ourself with the data
str(alcohol)
summary(alcohol)
#Load the Student Alcohol consumption data
alcohol<-read.csv(file="student-mat.csv", head=TRUE, sep=";", as.is = FALSE)
#run the Str and summary commands to acquaint ourself with the data
str(alcohol)
summary(alcohol)
#graph and review daily alcohol consumption
plot(table(alcohol$Dalc), type="b", col="cyan")
#graph and review daily alcohol consumption
plot(table(alcohol$Dalc), type="b", col="red")
pie(table (alcohol$Dalc))
hist(alcohol$Dalc)
#Discretize numerical variables and add labels for supervised learning
alcohol$age<-factor(alcohol$age)
alcohol$Medu <-factor(alcohol$Medu)
alcohol$Fedu <-factor(alcohol$Fedu)
alcohol$traveltime <-factor(alcohol$traveltime)
alcohol$studytime <-factor(alcohol$studytime, labels = c("<2hrs", "2 to 5 hrs","5 to 10 hrs","over 10 hrs"))
alcohol$famrel <-factor(alcohol$famrel, labels = c("very bad", "bad","fair","good","very good"))
alcohol$failures <-factor(alcohol$failures)
alcohol$freetime <-factor(alcohol$freetime, labels = c("very low", "low","medium","high","very high"))
alcohol$goout <-factor(alcohol$goout, labels = c("very low", "low","medium","high","very high"))
alcohol$Dalc <-factor(alcohol$Dalc, labels = c("very low", "low","medium","high","very high"))
alcohol$Walc <-factor(alcohol$Walc, labels = c("very low", "low","medium","high","very high"))
alcohol$health <-factor(alcohol$health, labels = c("very bad", "bad","fair","good","very good"))
alcohol$G1<-discretize(alcohol$G1, method="interval", breaks=5)
alcohol$G2<-discretize(alcohol$G2, method="interval", breaks=5)
alcohol$G3<-discretize(alcohol$G3, method="interval", breaks=5)
alcohol$absences<-discretize(alcohol$absences, method="fixed", breaks=c(0, 5, 10, 15, 75))
#Run Str command to view the discretized outputs
str(alcohol)
summary(alcohol)
#Run apriori method rules to get rules for low daily alcohol use
alclow<-apriori(alcohol, parameter= list(supp=0.2, conf=0.8, minlen=2), appearance=list(rhs=c("Dalc=very low", "Dalc=low"), default="lhs"))
alclow
#remove the redundant rules and display the remaining rules
rules.sorted <- sort(alclow, by="lift")
inspect(rules.sorted)
subset.matrix <- is.subset(rules.sorted, rules.sorted)
subset.matrix[lower.tri(subset.matrix, diag=T)] <- F
redundant <- colSums(subset.matrix, na.rm=T) >= 1
which(redundant)
rules.pruned <- rules.sorted[!redundant]
inspect(rules.pruned)
summary(rules.pruned)
# preview the top 5 rules by lift
inspect(head(sort(rules.pruned, by="lift")),n=5)
# preview the top 5 rules by lift
inspect(head(sort(rules.pruned, by="lift")),n=4)
# preview the top 5 rules by lift
inspect(head(sort(rules.pruned, by="lift")),n=5)
# reduce the number of rules by changing the min-supp to 0.3
alclow<-apriori(alcohol, parameter= list(supp=0.3, conf=0.8, minlen=2), appearance=list(rhs=c("Dalc=very low", "Dalc=low"), default="lhs"))
alclow
# reduce the number of rules by changing the min-supp to 0.3
alclow<-apriori(alcohol, parameter= list(supp=0.5, conf=0.8, minlen=2), appearance=list(rhs=c("Dalc=very low", "Dalc=low"), default="lhs"))
alclow
# reduce the number of rules by changing the min-supp to 0.3
alclow<-apriori(alcohol, parameter= list(supp=0.4, conf=0.8, minlen=2), appearance=list(rhs=c("Dalc=very low", "Dalc=low"), default="lhs"))
alclow
# reduce the number of rules by changing the min-supp to 0.3
alclow<-apriori(alcohol, parameter= list(supp=0.35, conf=0.8, minlen=2), appearance=list(rhs=c("Dalc=very low", "Dalc=low"), default="lhs"))
alclow
#Graph the data
plot(rules.pruned, method="paracoord", control=list(reorder=TRUE))
#Run apriori method rules to get rules for high daily alcohol use
alchigh<-apriori(alcohol, parameter= list(supp=0.2, conf=0.8, minlen=2), appearance=list(rhs=c("Dalc=very high", "Dalc=high","Dalc=medium"), default="lhs"))
alchigh
#Run apriori method rules to get rules for low daily alcohol use
alclow<-apriori(alcohol, parameter= list(supp=0.35, conf=0.8, minlen=2), appearance=list(rhs=c("Dalc=very low", "Dalc=low"), default="lhs"))
alclow
#remove the redundant rules and display the remaining rules
rules.sorted <- sort(alclow, by="lift")
inspect(rules.sorted)
subset.matrix <- is.subset(rules.sorted, rules.sorted)
subset.matrix[lower.tri(subset.matrix, diag=T)] <- F
redundant <- colSums(subset.matrix, na.rm=T) >= 1
which(redundant)
rules.pruned <- rules.sorted[!redundant]
inspect(rules.pruned)
summary(rules.pruned)
# preview the top 5 rules by lift
inspect(head(sort(rules.pruned, by="lift")),n=5)
#Graph the data
plot(rules.pruned, method="paracoord", control=list(reorder=TRUE))
#Run apriori method rules to get rules for high daily alcohol use
alchigh<-apriori(alcohol, parameter= list(supp=0.05, conf=0.2, minlen=2), appearance=list(rhs=c("Dalc=very high", "Dalc=high","Dalc=medium"), default="lhs"))
alchigh
#Run apriori method rules to get rules for high daily alcohol use
alchigh<-apriori(alcohol, parameter= list(supp=0.05, conf=0.3, minlen=2), appearance=list(rhs=c("Dalc=very high", "Dalc=high","Dalc=medium"), default="lhs"))
alchigh
#Run apriori method rules to get rules for high daily alcohol use
alchigh<-apriori(alcohol, parameter= list(supp=0.01, conf=0.3, minlen=2), appearance=list(rhs=c("Dalc=very high", "Dalc=high","Dalc=medium"), default="lhs"))
alchigh
#Run apriori method rules to get rules for high daily alcohol use
alchigh<-apriori(alcohol, parameter= list(supp=0.05, conf=0.2, minlen=2), appearance=list(rhs=c("Dalc=very high", "Dalc=high","Dalc=medium"), default="lhs"))
alchigh
#Run apriori method rules to get rules for high daily alcohol use
alchigh<-apriori(alcohol, parameter= list(supp=0.05, conf=0.1, minlen=2), appearance=list(rhs=c("Dalc=very high", "Dalc=high","Dalc=medium"), default="lhs"))
alchigh
#remove the redundant rules and to display the remaining rules
rules.sorted1 <- sort(alchigh, by="lift")
inspect(rules.sorted1)
subset.matrix <- is.subset(rules.sorted1, rules.sorted1)
subset.matrix[lower.tri(subset.matrix, diag=T)] <- F
redundant <- colSums(subset.matrix, na.rm=T) >= 1
which(redundant)
rules.pruned1 <- rules.sorted1[!redundant]
inspect(rules.pruned1)
summary(rules.pruned1)
#remove the redundant rules and to display the remaining rules
rules.sorted1 <- sort(alchigh, by="lift")
inspect(rules.sorted1)
subset.matrix <- is.subset(rules.sorted1, rules.sorted1)
subset.matrix[lower.tri(subset.matrix, diag=T)] <- F
redundant <- colSums(subset.matrix, na.rm=T) >= 1
which(redundant)
rules.pruned1 <- rules.sorted1[!redundant]
inspect(rules.pruned1)
summary(rules.pruned1)
#review the top 5 rules by confidence
inspect(head(sort(rules.pruned1, by="lift")),n=5)
# view the 3 generated rules by lift
inspect(head(sort(rules.pruned1, by="lift")))
#Graph the data
plot(rules.pruned1, method="paracoord", control=list(reorder=TRUE))
